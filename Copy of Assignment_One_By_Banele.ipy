{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Assignment_One_By_Banele.ipy","provenance":[{"file_id":"18hhYraeycTP73gLwZsQl-s-b1x9haWXh","timestamp":1652673298797}],"collapsed_sections":[],"authorship_tag":"ABX9TyNauwk+SvqQPfQs4nrbwAGx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"lR_Vs2cp9k42"},"outputs":[],"source":["#Question 1\n","n=int(input(\"Enter the integer :\"))\n","if n%3:\n","    print(\"Black\")\n","elif n%5:\n","    print(\"Pink\")\n","    \n","elif n%3 and n%5:\n","    print(\"BlackPink\")\n","elif n%2:#we have steps and the function will start displaying string from the left\n","    (\"BlackPink\"[::-1])"]},{"cell_type":"code","source":["#Question 2\n","import statistics # module that will assist us to compute standard deviation \n","import matplotlib.pyplot as plt\n","import numpy as np\n","#my empty list that will hold values after performing some applications \n","myNumbers=[]\n","numbers=str(input(\"Enter the number until the special string is detected as example of such string could be *:\"))\n","while not numbers==\"*\":\n","    numbers=float(numbers)\n","    myNumbers.append(numbers)\n","    numbers=str(input(\"Enter the number until the special string is detected as example of such string could be *:\"))\n","    #labels of graph\n","    plt.title(\" A histogram graph showing list of daily high temperatures for Durban, the test scores of a group of students\")\n","    plt.xlabel(\"x\")\n","    plt.ylabel(\"y\")\n","    plt.hist(myNumbers)\n","    #I just want to see how my list will be appended after looping till we encouter a string *\n","print(\"This is our list:\" +str(myNumbers))\n","print(\"The mean of our graph is given by: \"+str(np.mean(myNumbers)))\n","print(\"The median of our graph is given by: \"+str(np.mean(myNumbers)))\n","print(\"The standard deviation of our graph is given by: \"+str(statistics.pstdev(myNumbers)))\n","'''Number (5) This is the case where the user has not input a valid number so\n","that the list myNumbers contains exclusively elements of type float we will have the following loop\n","while is_float(numbers) != True:\n","  numbers=input(\"Enter the valid integer\")\n","'''\n","def is_float(element):\n","    try:\n","        float(element)\n","        return True\n","    except ValueError:\n","        return False\n","        '''\n"," These lines of codes catches an exception of which are \n"," errors detected during the execution of the program\n"," In my own understanding under try block we have a code that might generates an exception or to catch it \n"," The exception class that is specified Value error. If the user entered an integer or string instead of floating number the program will pop it up as value error exception. \n"," The reason of exception we want the program to terminate in an approprite way My example of catching an exception which is also related to this one.\n"," let say a number is divided by zero we know that any number divided by zero is undefined, here is a simple code of mine for such analogue\n"," try:\n","     x=20/0\n","except ZeroDivisionError as e:\n","print(\"Cannot divide the number by zero\"+e)\n"," \n"," '''   "],"metadata":{"id":"3-MMNtI099tZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Question 3 letter(a)&(b)\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","\n","\n","'''Algorithm I am required to sketch a graph base on the given statement\n","debfund=R100000,\n","MonthlyRepayment made on 1st of each month\n","interestRate=6.5% each month\n","\n","Solution\n","\n","We have 12 months in a year so debtFund=1000000/12\n","'''\n","#b.creating a loop that will control our program execution\n","#The x-axis start from 0 and below 60 from the given graph\n","#The method for computing the interest,returning a float value\n","def intrestPerMonth(amount: float)->float:\n","    return amount - (0.065 * amount)\n","#The method for computing the balance and return months,interest as a tuple\n","def payments(amount: float)-> tuple:\n","    intrest = list([100_000])\n","    months = list([0])\n","    k = 0\n","    while True:\n","        balance = intrest[-1] - intrestPerMonth(amount)\n","        intrest.append(balance)\n","        k += 1\n","        months.append(k)\n","        if balance <= 0:\n","            break\n","        \n","    return months, intrest\n","\n","#I jst make my code short and simple by introducing the asterick below\n","plt.plot(*payments(1_000.00),label=\"1000\")\n","plt.plot(*payments(2_000.00),label=\"2000\")\n","plt.plot(*payments(3_000.00),label=\"3000\")\n","plt.plot(*payments(4_000.00),label=\"4000\")#For the legend distiguishin label is required so much\n","\n","plt.legend()\n","plt.ylim((0, 100_000.00)) #The y-label start at zero and end up to 100_000.00\n","plt.xlim((0, 60)) #The x-label Start at zero and end at 60\n","plt.title(\"The graph that shows balance over a 5 year period for different values of monthlyRepayment\")\n","plt.ylabel(\"Debt\")\n","plt.xlabel(\"Number of months\")\n","axe=plt.gca()#manipulate the axis of graph  to be shifted upwards\n","plt.show()\n","\n","\n","# b.The method that compute \"Repayment in ... year and ... months\"\n","#returning a tuple\n","\n","def months_and_years(m:int)->tuple:\n","    return m/12, m%12\n","    #my code is simple I just did string manipulation to display output\n","y, m = months_and_years(len(payments(1_000.00)[0]))\n","print(f\"1000: Repayment in {y} year and {m} months\")\n","y, m = months_and_years(len(payments(2_000.00)[0]))\n","print(f\"2000:Repayment in {y} year and {m} months\")\n","y, m = months_and_years(len(payments(3_000.00)[0]))\n","print(f\"3000:Repayment in {y} year and {m} months\")\n","y, m = months_and_years(len(payments(4_000.00)[0]))\n","print(f\"4000:Repayment in {y} year and {m} months\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":364},"id":"SY8dTXiF-Zp_","executionInfo":{"status":"ok","timestamp":1652672868433,"user_tz":-120,"elapsed":1045,"user":{"displayName":"Banele Mthembu","userId":"03078932303387985290"}},"outputId":"d55e6c0d-b632-4413-8bfa-9e61c7eab6b6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["1000: Repayment in 9.0 year and 0 months\n","2000:Repayment in 4.583333333333333 year and 7 months\n","3000:Repayment in 3.0833333333333335 year and 1 months\n","4000:Repayment in 2.3333333333333335 year and 4 months\n"]}]},{"cell_type":"code","source":["#Question 3 letter(c)\n","try:#block that might generate an exception\n","    def intrestPerMonth(amount: float)->float:\n","    \n","        #code that might generate an exception\n","          return amount - (0.065 * amount)\n","       #The method for computing the balance and return months,interest as a tuple\n","    def payments(amount: float)-> tuple:\n","        intrest = list([100_000])\n","        months = list([0])\n","        k = 0\n","        while True:\n","             balance = intrest[-1] - intrestPerMonth(amount)\n","             intrest.append(balance)\n","             k += 1\n","             months.append(k)\n","             if payments() <= 0 and months<0:\n","                raise repaymentToSmall(\"Debit will never be paid\")#we want to raised an exception\n","                \n","        return months, intrest\n","finally:\n","  (\"Done\")"],"metadata":{"id":"U7XNlTTF-zQP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Question 4\n","import glob#module to access the file\n","import cv2 #The module that will us permit us to have the access To give the images\n","import matplotlib.pyplot as plt \n","path=r\"C:\\Users\\mphom\\Downloads\\download.jpg\"#where our image is located\n","img_rgb=cv2.imread(path,1)\n","img_grayscale=cv2.imread(path,0)\n","\n","plt.show()\n","#The superhero that is this kitten’s favourite is the Hulk man\n","#To load an image in python you need to down and install python cv2\n"],"metadata":{"id":"K1_38TcRFvXS"},"execution_count":null,"outputs":[]}]}